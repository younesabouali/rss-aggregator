// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, createdAt,updatedAt,name,api_key
)
VALUES ($1,$2,$3,$4,     encode(sha256(random()::text::bytea), 'hex'))
returning id, createdat, updatedat, name, api_key
`

type CreateUserParams struct {
	ID        uuid.UUID
	Createdat time.Time
	Updatedat time.Time
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Createdat,
		arg.Updatedat,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT id, createdat, updatedat, name, api_key FROM users WHERE api_key =$1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
