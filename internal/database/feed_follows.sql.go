// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteFeedFollow = `-- name: DeleteFeedFollow :one
DELETE FROM feed_follows WHERE feed_id =$1 AND user_id=$2
RETURNING id, created_at, updated_at, user_id, feed_id
`

type DeleteFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollow, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const followFeed = `-- name: FollowFeed :one
INSERT INTO feed_follows  (id,created_at,updated_at,user_id,feed_id) VALUES ($1,$2,$3,$4,$5)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type FollowFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) FollowFeed(ctx context.Context, arg FollowFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFollowedFeed = `-- name: GetFollowedFeed :many
SELECT feed_follows.id, created_at, updated_at, feed_follows.user_id, feed_id, feeds.id, createdat, updatedat, name, url, feeds.user_id FROM feed_follows RIGHT JOIN feeds ON feed_follows.feed_id = feeds.id WHERE feed_follows.user_id=$1 LIMIT $2 OFFSET $3
`

type GetFollowedFeedParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetFollowedFeedRow struct {
	ID        uuid.NullUUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	ID_2      uuid.UUID
	Createdat time.Time
	Updatedat time.Time
	Name      string
	Url       string
	UserID_2  uuid.UUID
}

func (q *Queries) GetFollowedFeed(ctx context.Context, arg GetFollowedFeedParams) ([]GetFollowedFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedFeed, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowedFeedRow
	for rows.Next() {
		var i GetFollowedFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.ID_2,
			&i.Createdat,
			&i.Updatedat,
			&i.Name,
			&i.Url,
			&i.UserID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
